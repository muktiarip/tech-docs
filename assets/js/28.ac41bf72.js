(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{374:function(e,t,a){"use strict";a.r(t);var n=a(42),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"stm32-programming-notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stm32-programming-notes"}},[e._v("#")]),e._v(" STM32 Programming Notes")]),e._v(" "),a("h2",{attrs:{id:"starting-stm32-programming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#starting-stm32-programming"}},[e._v("#")]),e._v(" Starting STM32 Programming")]),e._v(" "),a("p",[e._v("Its always best to start with an existing project, then adapt that. If you\ndon't have a suitable existing project then I suggest:")]),e._v(" "),a("ol",[a("li",[e._v("Create a makefile that builds a simple hello world style application for\nyour hardware - without adding in the FreeRTOS source files yet.")]),e._v(" "),a("li",[e._v("Ensure your project builds and runs as expected. That will give you a known\ngood starting point before you add in more source code.")]),e._v(" "),a("li",[e._v("Add the FreeRTOS source files to your project. You will find information on\nthe files that are needed, and the include paths that must be set, on the following page: http://www.freertos.org/Creating-a-new-FreeRTOS-project.html . The port layer files you need are in the FreeRTOS/source/portable/gcc/ARM_CM0 directory (assuming this is a Cortex-M0 part?).")]),e._v(" "),a("li",[e._v("You will need a FreeRTOSConfig.h file. The one used by the official\nFreeRTOS STM32F051 demo will probably be a good starting point.")]),e._v(" "),a("li",[e._v("Make sure the project builds, and you can still run the hello world\napplication.")]),e._v(" "),a("li",[e._v("Now create your FreeRTOS tasks - here is a good place to start:\n"),a("a",{attrs:{href:"http://www.freertos.org/Hardware-independent-RTOS-example.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Hardware independent FreeRTOS example"),a("OutboundLink")],1)])]),e._v(" "),a("h2",{attrs:{id:"stm32-hal-includes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stm32-hal-includes"}},[e._v("#")]),e._v(" STM32 HAL Includes")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<stm32f1xx_hal.h>\n  stm32f1xx_hal_conf.h\n\n<stm32f1xx_hal_def.h>\n  <CMSIS::stm32f1xx.h>\n\n<stm32f1xx_hal_PPP.h>\n  <stm32f1xx_hal_def.h>\n\nmain.h\n  <stm32f1xx_hal.h>\n\nPPP.h\n  main.h\n\nPPP.c\n  PPP.h\n\nmain.c\n  main.h\n  PPP.h\n\nstm32f1xx_hal_msp.c\n  main.h\n\nstm32f1xx_it.c\n  main.h\n  stm32f1xx_it.h\n")])])]),a("h2",{attrs:{id:"flashing-bluepill-using-openocd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flashing-bluepill-using-openocd"}},[e._v("#")]),e._v(" Flashing BluePill using openocd")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('openocd \\\n--file /data/embed/openocd-conf/stm32-bluepill.cfg \\\n--command "program build/spi_a.elf verify reset exit"\n')])])]),a("h2",{attrs:{id:"enable-disable-swd-debugging"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enable-disable-swd-debugging"}},[e._v("#")]),e._v(" Enable/Disable SWD Debugging")]),e._v(" "),a("p",[e._v("In file "),a("code",[e._v("stm32f1xx_hal_msp.c")]),e._v(":")]),e._v(" "),a("p",[a("code",[e._v("__HAL_AFIO_REMAP_SWJ_NOJTAG(); -- Enable SWD debugging.")])]),e._v(" "),a("p",[a("code",[e._v("__HAL_AFIO_REMAP_SWJ_DISABLE(); --\x3e Disable SWD debugging")])]),e._v(" "),a("h2",{attrs:{id:"debugging-stm32-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debugging-stm32-app"}},[e._v("#")]),e._v(" Debugging STM32 App")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Compile with -g option of gcc compiler.")])]),e._v(" "),a("li",[a("p",[e._v("In terminal #1:")])])]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("openocd -f /data/embed/openocd-conf/openocdstm32-bluepill.cfg\n")])])]),a("ul",[a("li",[e._v("In terminal #2:")])]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[e._v("/venv/gdbgui/bin/gdbgui -n -g "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  /embed/gcc-arm-none-eabi-8-2018-q4-major/bin/arm-none-eabi-gdb "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  path/to/stm32_program.elf\n")])])]),a("ul",[a("li",[e._v("Using web browser:\n"),a("ul",[a("li",[e._v("Open URL: "),a("code",[e._v("http://127.0.0.1:5000")])]),e._v(" "),a("li",[e._v("In gdb command line, type:\n"),a("ul",[a("li",[a("code",[e._v("target remote localhost:3333")])]),e._v(" "),a("li",[a("code",[e._v("monitor reset halt")])]),e._v(" "),a("li",[a("code",[e._v("continue")])])])]),e._v(" "),a("li",[e._v("Add breakpoints as necessary using "),a("code",[e._v("breakpoint")]),e._v(" gdb command")])])])]),e._v(" "),a("h2",{attrs:{id:"stm32f1-unbrick"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stm32f1-unbrick"}},[e._v("#")]),e._v(" STM32F1 Unbrick")]),e._v(" "),a("ul",[a("li",[e._v("Hold reset button while booting.")]),e._v(" "),a("li",[e._v("Connect openocd to target")]),e._v(" "),a("li",[e._v("On another terminal, telnet to "),a("code",[e._v("localhost:4444")]),e._v(", then send command "),a("code",[e._v("reset halt")])]),e._v(" "),a("li",[e._v("Release reset button.")]),e._v(" "),a("li",[e._v("On telnet session, send command "),a("code",[e._v("stm32f1x mass_erase 0")]),e._v(", then "),a("code",[e._v("exit")])])]),e._v(" "),a("p",[e._v("If you unable to program STM32F1 chip, hold reset button before flashing, run flashing software and immediately release reset button.")]),e._v(" "),a("h2",{attrs:{id:"debugging-stm32-application-using-qemu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debugging-stm32-application-using-qemu"}},[e._v("#")]),e._v(" Debugging STM32 Application using Qemu")]),e._v(" "),a("ul",[a("li",[e._v("Compile with -g option of gcc compiler.")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("/data/venv/python3.6/bin/gdbgui -n -g \\\n    /data/embed/gcc-arm-none-eabi-8-2018-q4-major/bin/arm-none-eabi-gdb \\\n    demos/uart_echo_int/main.elf\n\n/usr/local/bin/qemu-system-arm -M stm32-p103 -gdb tcp::3333 -S \\\n    -kernel demos/uart_echo_int/main.bin\n")])])]),a("ul",[a("li",[e._v("Open web browser to url: "),a("code",[e._v("http://localhost:5000/")]),e._v(" then\n"),a("code",[e._v("gdbgui/> connect to localhost:3333")])])]),e._v(" "),a("h2",{attrs:{id:"system-workbench-for-stm32-notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#system-workbench-for-stm32-notes"}},[e._v("#")]),e._v(" System Workbench for STM32 Notes")]),e._v(" "),a("p",[e._v("If debugging can't be executed, set this:")]),e._v(" "),a("p",[a("code",[e._v("reset_config none separate")])]),e._v(" "),a("h2",{attrs:{id:"sd-card-module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sd-card-module"}},[e._v("#")]),e._v(" SD Card Module")]),e._v(" "),a("ul",[a("li",[e._v("Blue MISO -> BPL#31:PA6")]),e._v(" "),a("li",[e._v("Green SCK -> BPL#30:PA5")]),e._v(" "),a("li",[e._v("Red MOSI -> BPL#32:PA7")]),e._v(" "),a("li",[e._v("Brown CS -> BPL#29:PA4")]),e._v(" "),a("li",[e._v("Yellow 3.3 volt -> BPL#")]),e._v(" "),a("li",[e._v("Orange GND -> BPL#")])])])}),[],!1,null,null,null);t.default=s.exports}}]);